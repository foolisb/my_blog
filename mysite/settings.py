"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-(t#_fwyznes!kqgpoh&_2&-+5n1wg*%x(kb*5ubtxpul*ai%9f'

# SECURITY WARNING: don't run with debug turned on in production!
# 关闭调试模式
DEBUG = False

# 允许的服务器
ALLOWED_HOSTS = ['*']

# 静态文件收集目录
STATIC_ROOT = os.path.join(BASE_DIR, 'collected_static')

AUTHENTICATION_BACKENDS = (
    #Django后台可独立于allauth登陆
    'django.contrib.auth.backends.ModelBackend',
    #配置allauth独有的认证方法，如email登陆
    'allauth.account.auth_backends.AuthenticationBackend',
)
# Application definition

INSTALLED_APPS = [
    'articles',
    'userprofile',
    'password_reset',#密码重置
    'comment',
    'taggit',#标签
    'simpleui',#美化后台
    'ckeditor',#富文本
    'ckeditor_uploader',#富文本文件上传
    'mptt',#多级评论
    'notifications',#消息通知
    'notice',
    #allauth启动必须项
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'django.contrib.sites',
    'django.contrib.auth',
    'django.contrib.messages',
    #添加第三方登陆
    'allauth.socialaccount.providers.github',

    'django.contrib.admin',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.staticfiles',
]

#设置站点
SITE_ID = 1

#登陆成功后重定向地址
#LOGIN_REDIRECT_URL = '/articles/articles_list'
LOGIN_REDIRECT_URL = '/'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                #allauth 启动必须项
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': '',
        'USER': '',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

#django3不支持<iframe>标签，需要如下修改
X_FRAME_OPTIONS = 'SAMEORIGIN'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#SMTP服务器，改为你的邮箱SMTP
EMAIL_HOST = 'smtp.qq.com'
#改为你的邮箱名字
EMAIL_HOST_USER = ''
#你的邮箱密码qq是授权码
EMAIL_HOST_PASSWORD = ''
#发送邮件的端口，在自己电脑配置端口号25，服务器可能要改
EMAIL_PORT = 25
#是否使用TLS
EMAIL_USE_TLS = True
#默认的发件人
DEFAULT_FROM_EMAIL = ''

# 媒体文件地址
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

#富文本ckeditor上传内容
CKEDITOR_UPLOAD_PATH = 'article_upload/'
#富文本配置
CKEDITOR_BROWSE_SHOW_DIRS = True 
CKEDITOR_CONFIGS = {
    # django-ckeditor默认使用default配置
    'default': {
        # 编辑器宽度自适应
        'width':'auto',
        'height':'250px',
        # tab键转换空格数
        'tabSpaces': 4,
        # 工具栏风格
        'toolbar': 'full',
        # 工具栏按钮
        # 加入代码块插件
        'extraPlugins': ','.join(['codesnippet',
                                  'prism',
                                  'widget',
                                  'lineutils',
                                  'texzilla',
                                  'emojione',
                                  'div',
                                 # 'devtools',
                                  'clipboard',
                                  'dialogui',
                                  'elementspath',
                                  'xml',
                                  'ckeditor_wiris',
                                  'image2',
                                # 'html5video',
                                  'uploadimage',
                                  'slideshow',
                                  'contextmenu',
                                  'fakeobjects',
                                  'codeTag'
                                  ]),
    },
    
    'comment':{
        # 编辑器宽度自适应
        'width':'auto',
        'height':'150px',
        # tab键转换空格数
        'tabSpaces': 4,
        # 工具栏风格
        'toolbar': 'Custom',
        # 工具栏按钮
        'toolbar_Custom': [
            # 表情 代码块
            ['Emojione', 'CodeSnippet'], 
            # 字体风格
            ['Bold'],
            # 字体颜色
            ['TextColor'],
            # 链接
            ['Link'],
            # 列表
            ['NumberedList'],
        ],
        # 加入代码块插件
        'extraPlugins': ','.join(['codesnippet', 
                                  'prism',
                                  'widget',
                                  'lineutils',
                                  'emojione']),
    }
}
